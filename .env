# ==============================================================================
# .env - Environment Variables for E-commerce Microservices
#
# This file defines configuration settings for your application,
# allowing for easy management of sensitive data and environment-specific values.
#
# IMPORTANT: For production environments, consider using more secure methods
# for managing secrets (e.g., Docker Secrets, Kubernetes Secrets, HashiCorp Vault).
# ==============================================================================

# ------------------------------------------------------------------------------
# 1. General Application Settings
# ------------------------------------------------------------------------------
# NODE_ENV: Application environment (e.g., development, production, test)
NODE_ENV=development
# LOG_LEVEL: Minimum logging level (e.g., debug, info, warn, error)
LOG_LEVEL=debug
# JWT_SECRET: Secret key for signing and verifying JSON Web Tokens.
# IMPORTANT: Use a strong, randomly generated key for production.
JWT_SECRET=your_super_secret_jwt_key_that_is_long_and_random_for_production_use_123abc

# ------------------------------------------------------------------------------
# 2. Service Port Configuration (Host Machine Ports)
# ------------------------------------------------------------------------------
# These ports are exposed on your host machine to access the services.
API_GATEWAY_PORT=3000
USER_SERVICE_PORT=3001
AUTH_SERVICE_PORT=3002
ORDER_SERVICE_PORT=3003
CART_SERVICE_PORT=3004
PRODUCT_SERVICE_PORT=3005
NOTIFICATION_SERVICE_PORT=3007

# ------------------------------------------------------------------------------
# 3. Internal Service URLs (Docker Network Communication)
# ------------------------------------------------------------------------------
# These URLs are used by microservices to communicate with each other
# within the Docker Compose network. They use the service names defined
# in docker-compose.yaml as hostnames.
API_GATEWAY_URL=http://api-gateway:${API_GATEWAY_PORT}
USER_SERVICE_URL=http://users-microservice:${USER_SERVICE_PORT}
AUTH_SERVICE_URL=http://auth-microservice:${AUTH_SERVICE_PORT}
ORDER_SERVICE_URL=http://orders-microservice:${ORDER_SERVICE_PORT}
CART_SERVICE_URL=http://cart-microservice:${CART_SERVICE_PORT}
PRODUCT_SERVICE_URL=http://products-microservice:${PRODUCT_SERVICE_PORT}
NOTIFICATION_SERVICE_URL=http://notifications-microservice:${NOTIFICATION_SERVICE_PORT}

# ------------------------------------------------------------------------------
# 4. Database Configuration
# ------------------------------------------------------------------------------

# PostgreSQL Database Settings (for User, Product, Auth, Order, Cart Services)
# POSTGRES_HOST should be the service name of your PostgreSQL container in docker-compose.yaml
POSTGRES_USER=ecommerce_user
POSTGRES_PASSWORD=admin123
POSTGRES_DB=ecommerce_db
POSTGRES_HOST=postgres
POSTGRES_PORT=5432

# MongoDB Database Settings (for Order Service, if applicable)
# MONGO_URI: Connection string for MongoDB. 'mongodb' is the service name.
MONGO_URI=mongodb://mongodb:27017/ecommerce_orders_db
MONGO_USER=mongo_user
MONGO_PASSWORD=strong_mongo_password_dev
MONGO_DB=ecommerce_orders_db

# PGAdmin Configuration (if used for PostgreSQL management)
PGADMIN_DEFAULT_EMAIL=admin@admin.com
PGADMIN_DEFAULT_PASSWORD=admin123
PGADMIN_DEFAULT_PASSWORD_FILE=admin123

# Redis Configuration
# REDIS_HOST should be the service name of your Redis container in docker-compose.yaml
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}

#Shipping Service
SHIPPING_POSTGRES_USER=shipping_user
SHIPPING_POSTGRES_PASSWORD=shipping_password
SHIPPING_POSTGRES_DB=shipping_db
SHIPPING_SERVICE_PORT=3007
SHIPPING_SERVICE_URL=http://shipping-microservice:${SHIPPING_SERVICE_PORT}


# Stock Service.
STOCK_SERVICE_PORT=3008
STOCK_SERVICE_URL=http://stock-microservice:${STOCK_SERVICE_PORT}


# ------------------------------------------------------------------------------
# 5. Message Queue (Kafka) Configuration
# ------------------------------------------------------------------------------
# KAFKA_BROKER_URL: Address of the Kafka broker within the Docker network.
# 'kafka' is the service name, '9093' is the internal advertised port.
KAFKA_BROKER_URL=kafka:9093
# KAFKA_CLIENT_ID: Identifier for the Kafka client (e.g., 'notification-service-client')
KAFKA_CLIENT_ID=ecommerce-notification-client
# KAFKA_CONSUMER_GROUP_ID: Group ID for Kafka consumers to coordinate message consumption.
KAFKA_CONSUMER_GROUP_ID=ecommerce-notification-group

# ------------------------------------------------------------------------------
# 6. Email Service Configuration (for Notifications Microservice)
# ------------------------------------------------------------------------------
# SMTP_HOST: The hostname of your SMTP server (e.g., smtp.gmail.com, smtp.sendgrid.net)
# IMPORTANT: For production, use a dedicated transactional email service.
SMTP_HOST=smtp.gmail.com
# SMTP_PORT: The port for your SMTP server (587 for STARTTLS, 465 for SMTPS)
SMTP_PORT=587
# SMTP_USER: The username for SMTP authentication (often your email address)
SMTP_USER=your_app_email@gmail.com
# SMTP_PASS: The password or app-specific password for SMTP authentication.
# IMPORTANT: Use an "App Password" for services like Gmail, not your main password.
SMTP_PASS=your_gmail_app_password_or_service_password
# SMTP_FROM_EMAIL: The sender's email address and display name.
SMTP_FROM_EMAIL="E-commerce Notifications <your_app_email@gmail.com>"

# Elasticsearch Configuration
ELASTICSEARCH_URL=http://localhost:9200
ELASTICSEARCH_USERNAME=
ELASTICSEARCH_PASSWORD=
ELASTIC_CA_CERT=
